// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuestionBank.Models;

#nullable disable

namespace QuestionBank.Migrations
{
    [DbContext(typeof(HutechQuestionBank))]
    [Migration("20240526120557_v2")]
    partial class v2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("QuestionBank.Models.CauHoi", b =>
                {
                    b.Property<Guid>("MaCauHoi")
                        .HasColumnType("uniqueidentifier");

                    b.Property<short>("CapDo")
                        .HasColumnType("smallint");

                    b.Property<int>("CloId")
                        .HasColumnType("int");

                    b.Property<double?>("DoPhanCachCauHoi")
                        .HasColumnType("float");

                    b.Property<bool>("HoanVi")
                        .HasColumnType("bit");

                    b.Property<Guid?>("MaCauHoiCha")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MaPhan")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MaSoCauHoi")
                        .HasColumnType("int");

                    b.Property<DateTime?>("NgaySua")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("NgayTao")
                        .HasColumnType("datetime");

                    b.Property<string>("NoiDung")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SoCauHoiCon")
                        .HasColumnType("int");

                    b.Property<int?>("SoLanDung")
                        .HasColumnType("int");

                    b.Property<int?>("SoLanDuocThi")
                        .HasColumnType("int");

                    b.Property<bool?>("XoaTamCauHoi")
                        .HasColumnType("bit");

                    b.HasKey("MaCauHoi");

                    b.HasIndex("CloId");

                    b.HasIndex("MaPhan");

                    b.ToTable("CauHoi", (string)null);
                });

            modelBuilder.Entity("QuestionBank.Models.CauTraLoi", b =>
                {
                    b.Property<Guid>("MaCauTraLoi")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("HoanVi")
                        .HasColumnType("bit");

                    b.Property<bool>("LaDapAn")
                        .HasColumnType("bit");

                    b.Property<Guid>("MaCauHoi")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NoiDung")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ThuTu")
                        .HasColumnType("int");

                    b.HasKey("MaCauTraLoi");

                    b.HasIndex("MaCauHoi");

                    b.ToTable("CauTraLoi", (string)null);
                });

            modelBuilder.Entity("QuestionBank.Models.ChiTietDeThi", b =>
                {
                    b.Property<Guid>("MaDeThi")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MaPhan")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MaCauHoi")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ThuTu")
                        .HasColumnType("int");

                    b.HasKey("MaDeThi", "MaPhan", "MaCauHoi");

                    b.HasIndex("MaCauHoi");

                    b.HasIndex("MaPhan");

                    b.ToTable("ChiTietDeThi", (string)null);
                });

            modelBuilder.Entity("QuestionBank.Models.Clo", b =>
                {
                    b.Property<int>("CloId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CloId"));

                    b.Property<string>("CloName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CloId");

                    b.ToTable("Clos");
                });

            modelBuilder.Entity("QuestionBank.Models.CustomUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Img")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("KhoaID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("KhoaID");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("QuestionBank.Models.DeThi", b =>
                {
                    b.Property<Guid>("MaDeThi")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("DaDuyet")
                        .HasColumnType("bit");

                    b.Property<Guid>("MaMonHoc")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("NgayTao")
                        .HasColumnType("datetime");

                    b.Property<string>("TenDeThi")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("MaDeThi");

                    b.HasIndex("MaMonHoc");

                    b.ToTable("DeThi", (string)null);
                });

            modelBuilder.Entity("QuestionBank.Models.File", b =>
                {
                    b.Property<Guid>("MaFile")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("LoaiFile")
                        .HasColumnType("int");

                    b.Property<Guid?>("MaCauHoi")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MaCauTraLoi")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TenFile")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("MaFile")
                        .HasName("PK_File");

                    b.HasIndex("MaCauHoi");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("QuestionBank.Models.Khoa", b =>
                {
                    b.Property<Guid>("MaKhoa")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TenKhoa")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool?>("XoaTamKhoa")
                        .HasColumnType("bit");

                    b.HasKey("MaKhoa");

                    b.ToTable("Khoa", (string)null);
                });

            modelBuilder.Entity("QuestionBank.Models.MonHoc", b =>
                {
                    b.Property<Guid>("MaMonHoc")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MaKhoa")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MaSoMonHoc")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TenMonHoc")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool?>("XoaTamMonHoc")
                        .HasColumnType("bit");

                    b.HasKey("MaMonHoc");

                    b.HasIndex("MaKhoa");

                    b.ToTable("MonHoc", (string)null);
                });

            modelBuilder.Entity("QuestionBank.Models.Phan", b =>
                {
                    b.Property<Guid>("MaPhan")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("LaCauHoiNhom")
                        .HasColumnType("bit");

                    b.Property<Guid>("MaMonHoc")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MaPhanCha")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("MaSoPhan")
                        .HasColumnType("int");

                    b.Property<string>("NoiDung")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SoLuongCauHoi")
                        .HasColumnType("int");

                    b.Property<string>("TenPhan")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("ThuTu")
                        .HasColumnType("int");

                    b.Property<bool?>("XoaTamPhan")
                        .HasColumnType("bit");

                    b.HasKey("MaPhan");

                    b.HasIndex("MaMonHoc");

                    b.ToTable("Phan", (string)null);
                });

            modelBuilder.Entity("QuestionBank.Models.YeuCauRutTrich", b =>
                {
                    b.Property<Guid>("MaYeuCauDe")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("HoTenGiaoVien")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("NgayLay")
                        .HasColumnType("datetime");

                    b.Property<string>("NoiDungRutTrich")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MaYeuCauDe")
                        .HasName("PK_YeuCauDe");

                    b.ToTable("YeuCauRutTrich", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("QuestionBank.Models.CustomUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("QuestionBank.Models.CustomUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuestionBank.Models.CustomUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("QuestionBank.Models.CustomUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QuestionBank.Models.CauHoi", b =>
                {
                    b.HasOne("QuestionBank.Models.Clo", "Clo")
                        .WithMany()
                        .HasForeignKey("CloId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuestionBank.Models.Phan", "MaPhanNavigation")
                        .WithMany("CauHois")
                        .HasForeignKey("MaPhan")
                        .IsRequired()
                        .HasConstraintName("FK_CauHoi_Phan");

                    b.Navigation("Clo");

                    b.Navigation("MaPhanNavigation");
                });

            modelBuilder.Entity("QuestionBank.Models.CauTraLoi", b =>
                {
                    b.HasOne("QuestionBank.Models.CauHoi", "MaCauHoiNavigation")
                        .WithMany("CauTraLois")
                        .HasForeignKey("MaCauHoi")
                        .IsRequired()
                        .HasConstraintName("FK_CauTraLoi_CauHoi");

                    b.Navigation("MaCauHoiNavigation");
                });

            modelBuilder.Entity("QuestionBank.Models.ChiTietDeThi", b =>
                {
                    b.HasOne("QuestionBank.Models.CauHoi", "MaCauHoiNavigation")
                        .WithMany("ChiTietDeThis")
                        .HasForeignKey("MaCauHoi")
                        .IsRequired()
                        .HasConstraintName("FK_ChiTietDeThi_CauHoi1");

                    b.HasOne("QuestionBank.Models.DeThi", "MaDeThiNavigation")
                        .WithMany("ChiTietDeThis")
                        .HasForeignKey("MaDeThi")
                        .IsRequired()
                        .HasConstraintName("FK_ChiTietDeThi_DeThi");

                    b.HasOne("QuestionBank.Models.Phan", "MaPhanNavigation")
                        .WithMany("ChiTietDeThis")
                        .HasForeignKey("MaPhan")
                        .IsRequired()
                        .HasConstraintName("FK_ChiTietDeThi_Phan");

                    b.Navigation("MaCauHoiNavigation");

                    b.Navigation("MaDeThiNavigation");

                    b.Navigation("MaPhanNavigation");
                });

            modelBuilder.Entity("QuestionBank.Models.CustomUser", b =>
                {
                    b.HasOne("QuestionBank.Models.Khoa", "MaKHoaNavigation")
                        .WithMany()
                        .HasForeignKey("KhoaID");

                    b.Navigation("MaKHoaNavigation");
                });

            modelBuilder.Entity("QuestionBank.Models.DeThi", b =>
                {
                    b.HasOne("QuestionBank.Models.MonHoc", "MaMonHocNavigation")
                        .WithMany("DeThis")
                        .HasForeignKey("MaMonHoc")
                        .IsRequired()
                        .HasConstraintName("FK_DeThi_MonHoc");

                    b.Navigation("MaMonHocNavigation");
                });

            modelBuilder.Entity("QuestionBank.Models.File", b =>
                {
                    b.HasOne("QuestionBank.Models.CauHoi", "MaCauHoiNavigation")
                        .WithMany("Files")
                        .HasForeignKey("MaCauHoi")
                        .HasConstraintName("FK_File_CauHoi");

                    b.Navigation("MaCauHoiNavigation");
                });

            modelBuilder.Entity("QuestionBank.Models.MonHoc", b =>
                {
                    b.HasOne("QuestionBank.Models.Khoa", "MaKhoaNavigation")
                        .WithMany("MonHocs")
                        .HasForeignKey("MaKhoa")
                        .IsRequired()
                        .HasConstraintName("FK_MonHoc_Khoa");

                    b.Navigation("MaKhoaNavigation");
                });

            modelBuilder.Entity("QuestionBank.Models.Phan", b =>
                {
                    b.HasOne("QuestionBank.Models.MonHoc", "MaMonHocNavigation")
                        .WithMany("Phans")
                        .HasForeignKey("MaMonHoc")
                        .IsRequired()
                        .HasConstraintName("FK_Phan_MonHoc");

                    b.Navigation("MaMonHocNavigation");
                });

            modelBuilder.Entity("QuestionBank.Models.CauHoi", b =>
                {
                    b.Navigation("CauTraLois");

                    b.Navigation("ChiTietDeThis");

                    b.Navigation("Files");
                });

            modelBuilder.Entity("QuestionBank.Models.DeThi", b =>
                {
                    b.Navigation("ChiTietDeThis");
                });

            modelBuilder.Entity("QuestionBank.Models.Khoa", b =>
                {
                    b.Navigation("MonHocs");
                });

            modelBuilder.Entity("QuestionBank.Models.MonHoc", b =>
                {
                    b.Navigation("DeThis");

                    b.Navigation("Phans");
                });

            modelBuilder.Entity("QuestionBank.Models.Phan", b =>
                {
                    b.Navigation("CauHois");

                    b.Navigation("ChiTietDeThis");
                });
#pragma warning restore 612, 618
        }
    }
}
